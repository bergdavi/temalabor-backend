openapi: 3.0.1
info:
  title: Public Transport
  description: Backend API for Public Transport project
  version: 1.0.0
servers:
  - url: https://temalabor2019.azurewebsites.net/api/
tags:
  - name: auth
    description: Registering and authenticating users
  - name: user
    description: Getting and changing user data
  - name: ticket
    description: Getting and changing ticket data
  - name: transport line
    description: Getting and changing transport line data
  - name: vehicle
    description: Getting and changin vehicle data
paths:
  /auth/register:
    post:
      tags:
        - auth
      summary: Register a new user
      operationId: registerUser
      requestBody:
        description: User object to be registered
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                idCard:
                  type: string
                password:
                  type: string
                type:
                  type: string
                  description: Optional, value can be "user" (default), "inspector", "admin", creating inspector and admin user requires admin previliges
        required: true
      responses:
        200:
          description: The user has been registered
          content: {}
        400:
          description: Bad request
          content: {}
      security:
        - cookieAuth: []
  /auth/login:
    post:
      tags:
        - auth
      summary: Login an existing user
      operationId: loginUser
      requestBody:
        description: User object to be logged in
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
        required: true
      responses:
        302:
          description: Authentication is successful, redirect to /user/{userId}
          content: {}
        400:
          description: Bad request
          content: {}
      security:
        - cookieAuth: []
  /auth/logout:
    post:
      tags:
        - auth
      summary: Logout a logged in existing user
      operationId: logoutUser
      responses:
        '200':
          description: User successfully logged out
          content: {}
        401:
          description: Unauthorized, user not logged in
          content: {}
      security:
        - cookieAuth: []
  /user:
    get:
      tags:
        - user
      summary: Get data for logged in user
      operationId: getLoggedinUser
      responses:
        302:
          description: redirect to /user/{userId}
          content: {}
        401:
          description: Unauthorized, user not logged in
          content: {}
      security:
        - cookieAuth: []
  /user/{userId}:
    get:
      tags:
        - user
      summary: Get data for specific user
      operationId: getUser
      parameters:
        - name: userId
          in: path
          description: ID of user to return, must have inspector or admin previliges, or be the logged in user
          required: true
          schema:
            type: string
      responses:
        200:
          description: User data
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                  email:
                    type: string
                  type:
                    type: string
        401:
          description: Unauthorized, user not logged in
          content: {}
      security:
        - cookieAuth: []
    post:
      tags:
        - user
      summary: Change user data
      operationId: changeUserData
      parameters:
        - name: userId
          in: path
          description: ID of user to be changed, must be admin or logged in user
          required: true
          schema:
            type: string
      requestBody:
        description: User object to be updated
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    name:
                      type: string
                    email:
                      type: string
                - type: object
                  properties:
                    oldPassword:
                      type: string
                    newPassword:
                      type: string
        required: true
      responses:
        200:
          description: The user has been registered
          content: {}
        400:
          description: Bad request
          content: {}
      security:
        - cookieAuth: []
  /user/{userId}/tickets:
    get:
      tags:
        - user
      summary: Get list of owned tickets for specific user
      operationId: getUserTickets
      parameters:
        - name: userId
          in: path
          description: ID of user to return owned tickets for, must have inspector or admin previliges, or be the logged in user
          required: true
          schema:
            type: string
      responses:
        200:
          description: List of owned tickets
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    type:
                      type: string
                    typeId:
                      type: integer
                    name:
                      type: string
                    validFrom:
                      type: string
                      format: date
                    validUntil:
                      type: string
                      format: date
                    validOnLine:
                      type: string
        401:
          description: Unauthorized, user not logged in
          content: {}
      security:
        - cookieAuth: []
  /users:
    get:
      tags:
        - user
      summary: Get data for all users
      operationId: getUsers
      responses:
        200:
          description: User data
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    name:
                      type: string
                    email:
                      type: string
                    type:
                      type: string
        401:
          description: Unauthorized, user not logged in
          content: {}
      security:
        - cookieAuth: []
  /ticket:
    post:
      tags:
        - ticket
      summary: Add a new ticket type to the system
      description: Add a new ticket type to the system, must have admin previliges
      operationId: addTicketType
      requestBody:
        description: Ticket details to add
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                validFor:
                  type: integer
                  description: Validity of ticket in days, if not given ticket is valid for a single line
                price:
                  type: integer
                  description: Price of ticket in HUF
                line:
                  type: string
                  description: Transport line, if not given ticket is valid for any line
      responses:
        200:
          description: Ticket successfully bought
          content: {}
        401:
          description: Unauthorized, user not logged in
          content: {}
        402:
          description: Payment failed
          content: {}
      security:
        - cookieAuth: []
  /ticket/{ticketId}:
    get:
      tags:
        - ticket
      summary: Get data for specific ticket type
      operationId: getTicket
      parameters:
        - name: ticketId
          in: path
          description: ID of ticket to return
          required: true
          schema:
            type: string
      responses:
        200:
          description: Ticket data
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                    description: Ticket type
                  typeId:
                    type: string
                    description: Type ID
                  validFor:
                    type: integer
                    description: Validiity of tickets in days, 0 if valid for line
                  line:
                    type: integer
                    description: Line the ticket is valid on, * if valid on all lines
        404:
          description: Ticket type not found
          content: {}
    post:
      tags:
        - ticket
      summary: Change ticket data
      operationId: changeTicketData
      parameters:
        - name: ticketId
          in: path
          description: ID of ticket to be changed, must be admin
          required: true
          schema:
            type: string
      requestBody:
        description: Ticket object to be updated
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                validFor:
                  type: integer
                line:
                  type: string
        required: true
      responses:
        200:
          description: The ticket has been updated
          content: {}
        400:
          description: Bad request
          content: {}
      security:
        - cookieAuth: []
  /tickets:
    get:
      tags:
        - ticket
      summary: Get data for available tickets
      operationId: getTickets
      responses:
        200:
          description: User data
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    type:
                      type: string
                    typeId:
                      type: integer
                    name:
                      type: string
                    price:
                      type: integer
  /tickets/buy:
    post:
      tags:
        - ticket
      summary: Buy type of ticket
      description: Buy type of ticket, must be regular user
      operationId: buyTicket
      requestBody:
        description: Ticket details to buy
        content:
          application/json:
            schema:
              type: object
              properties:
                typeId:
                  type: string
                  description: Type id of ticket to buy
                fromDate:
                  type: string
                  description: Date for the ticket to be valid from, only required for passes
      responses:
        200:
          description: Ticket successfully bought
          content: {}
        401:
          description: Unauthorized, user not logged in
          content: {}
        402:
          description: Payment failed
          content: {}
      security:
        - cookieAuth: []
  /tickets/validate:
    post:
      tags:
        - ticket
      summary: Validate a ticket
      description: Validate a ticket that is only valid for a single transport line, passes don't need to be validated, must be regular user
      operationId: validateTicket
      requestBody:
        description: Ticket ID to validate
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: Ticket ID
      responses:
        200:
          description: Ticket validated sucessfully
          content: {}
        400:
          description: Bad request, user doesn't own this ticket / ticket has been already validated
          content: {}
        401:
          description: Unauthorized, user not logged in
          content: {}
        500:
          description: Ticket validation failed because of internal server error
          content: {}
      security:
        - cookieAuth: []
  /tickets/inspect:
    post:
      tags:
        - ticket
      summary: Inspect a ticket
      operationId: inspectTicket
      description: Inspect a ticket, must be inspector
      requestBody:
        description: Ticket ID to be inspected
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: Ticket ID
      responses:
        200:
          description: Ticket inspected successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the ticket, can be valid, expired, invalid
                  validFrom:
                    type: string
                    description: Date ticket is valid from, today for line tickets
                  validUntil:
                    type: string
                    description: Date ticket is valid until today for line tickets
                  line:
                    type: string
                    description: Line ticket is valid for, * if ticket is valid for all lines
        401:
          description: Unauthorized, user not logged in, or is not inspector
          content: {}
        500:
          description: Ticket inspection failed because of internal server error
          content: {}
      security:
        - cookieAuth: []
  /line:
    post:
      tags:
        - transport line
      summary: Add a new transport line
      description: Add a new ticket transport line, must be admin
      operationId: addTransportLine
      requestBody:
        description: Transport line details to add
        content:
          application/json:
            schema:
              type: object
              properties:
                number:
                  type: string
                  description: Line number, must be unique
                type:
                  type: string
                  description: Transport type, e.g bus, tram...
      responses:
        200:
          description: Vehicle added successfully
          content: {}
        401:
          description: Unauthorized, user not logged in, or not adming
          content: {}
      security:
        - cookieAuth: []
  /line/{lineId}:
    get:
      tags:
        - transport line
      summary: Get data for specific transport line
      operationId: getLine
      parameters:
        - name: lineId
          in: path
          description: Line ID of transport line to return
          required: true
          schema:
            type: string
      responses:
        200:
          description: Transport line data
          content:
            application/json:
              schema:
                type: object
                properties:
                  number:
                    type: string
                    description: Line number
                  type:
                    type: string
                    description: Transport type
                  id:
                    type: string
                    description: Line ID
        404:
          description: Transport line not found
          content: {}
    post:
      tags:
        - transport line
      summary: Change transport line data
      operationId: changeLineData
      description: Change transport line data, must be admin
      parameters:
        - name: lineId
          in: path
          description: Line ID of transport line to be changed
          required: true
          schema:
            type: string
      requestBody:
        description: Line object to be updated
        content:
          application/json:
            schema:
              type: object
              properties:
                number:
                  type: string
                type:
                  type: integer
        required: true
      responses:
        200:
          description: The line has been updated
          content: {}
        400:
          description: Bad request
          content: {}
      security:
        - cookieAuth: []
  /lines:
    get:
      tags:
        - transport line
      summary: Get data for all transport lines
      operationId: getTransportLines
      responses:
        200:
          description: Transport line data
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    number:
                      type: string
                      description: Line number
                    type:
                      type: string
                      description: Vehicle type
                    id:
                      type: string
                      description: Line ID
  /vehicle:
    post:
      tags:
        - vehicle
      summary: Add a new vehicle
      description: Add a new vehicle to the sysetem, must be admin
      operationId: addVehicle
      requestBody:
        description: Vehicle line details to add
        content:
          application/json:
            schema:
              type: object
              properties:
                licencePlate:
                  type: string
                  description: Licence plate, must be unique
                lineId:
                  type: string
                  description: Transport line id
      responses:
        200:
          description: Vehicle added successfully
          content: {}
        401:
          description: Unauthorized, user not logged in, or not admin
          content: {}
      security:
        - cookieAuth: []
  /vehicle/{vehicleId}:
    get:
      tags:
        - vehicle
      summary: Get data for specific vehicle
      operationId: getVehicle
      parameters:
        - name: vehicleId
          in: path
          description: ID of vehicle to return
          required: true
          schema:
            type: string
      responses:
        200:
          description: Vehicle data
          content:
            application/json:
              schema:
                type: object
                properties:
                  licencePlate:
                    type: string
                    description: Licence plate
                  line:
                    type: string
                    description: Transport line
                  id:
                    type: string
                    description: Vehcile ID
        404:
          description: Vehicle line not found
          content: {}
    post:
      tags:
        - vehicle
      summary: Change vehicle data
      operationId: changeVehicleData
      description: Change vehicle data, must be admin
      parameters:
        - name: vehicleId
          in: path
          description: ID if vehicle to be changed
          required: true
          schema:
            type: string
      requestBody:
        description: Vehicle object to be updated
        content:
          application/json:
            schema:
              type: object
              properties:
                licencePlate:
                  type: string
                line:
                  type: integer
        required: true
      responses:
        200:
          description: The vehicle has been updated
          content: {}
        400:
          description: Bad request
          content: {}
      security:
        - cookieAuth: []
  /vehicles:
    get:
      tags:
        - vehicle
      summary: Get data for all transport vehicles
      operationId: getVehicles
      responses:
        200:
          description: Vehicle data
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    licencePlate:
                      type: string
                    line:
                      type: integer
    
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          description: Unique id of user, generated when registering
        email:
          type: string
          description: Email address of user
        name:
          type: string
          description: Full name of user
        idCard:
          type: string
          description: ID Card number of user, for verifying by the inspector
        password:
          type: string
          description: Password of the user (salted + hashed before storing)
        type:
          type: string
          description: User type, can be user, inspector, admin
        tickets:
          type: array
          items:
            $ref: '#/components/schemas/Ticket'
    Ticket:
      type: object
      properties:
        typeId:
          type: string
          description: ID of ticket type, generated when adding ticket
        type:
          type: string
          description: User friendly name of ticket type
        validFor:
          type: integer
          description: Interval of ticket validity in days (can be null)
        line:
          $ref: '#/components/schemas/Line'
          description: Line the ticket is valid for (can be null)
    Line:
      type: object
      properties:
        id:
          type: string
          description: ID of transport line, generated when adding line
        type:
          type: string
          description: Type of line, e.g. bus, tram, etc.
    Vehicle:
      type: object
      properties:
        id:
          type: string
          description: ID of vehicle, generated when adding vehicle
        licencePlate:
          type: string
          description: Licence plate of vehicle
        line:
          $ref: '#/components/schemas/Line'
          description: Line the vehicle belongs to
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: session_id
      description: Session id will be porvided in cookie on login request, and is required for any future requests that requires authorization
